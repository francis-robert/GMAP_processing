tf_2<-time_flagging(tf,timestart = "03/18/2025 10:45:00", timestop = "03/18/2025 11:01:00", timeqt = "WHOOPER",
analyte = c("H2S","CH4","acetone"))
tran_max<- transect_max(tf_2)
View(tran_max)
#time series test #####
tst<- ts_table(tf_2,rm_flagged = "no")
View(tst)
timeseries<-ts_plot(tf_2,grp = c("A","B","Y"),
analyte=c("H2S,benzene","toluene,xyleth,acetone","acrolein,butadiene"),
time_labels="300 sec")
View(timeseries)
View(timeseries)
timeseries[["MA05_B"]]
timeseries[["MA07_Y"]]
use_r("ts_plot")
timeseries<-ts_plot(tf_2,grp = c("A","B","Y"),
analyte=c("H2S,benzene","toluene,xyleth,acetone","acrolein,butadiene"),
time_labels="300 sec",
multi_analyte = FALSE)
timeseries<-ts_plot(tf_2,analyte = "H2S",
time_labels="300 sec",
multi_analyte = F)
timeseries<-ts_plot(tf_2,analyte = "H2S",grp = "A",
time_labels="300 sec",
multi_analyte = F)
timeseries_single<-ts_plot(tf_2,analyte = "H2S",grp = "A",
time_labels="300 sec",
multi_analyte = F)
View(timeseries_single)
timeseries_single[["MA06_A"]]
tf_3<-tf_2 %>%
bind_rows(tf_2[1:10,]) %>%
mutate(value=case_when(header=="ANALYTE_H2S" & value<=0~5000,
.default = value))
break_pt <- read.csv("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/gmap_package/GMAPR/GMAPR2/analyte_breaks.csv")
MA_test<-MA_map(x= tf_3,rast_path = "C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/gmap_package/GMAPR/landsat_gmap_test",
z=break_pt,analyte = "H2S",extent = "w", transect= "MA04",campaign = "test_test",
rast_type = "landsat",pt_size = 2,color_pal = "p")
MA_test
MA_test_2<-MA_map(x= tf_3,rast_path = "C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/gmap_package/GMAPR/landsat_gmap_test",
z=break_pt,analyte = "H2S",extent = "s", transect= "MA04",campaign = "test_test",
rast_type = "landsat",pt_size = 2,color_pal = "p")
MA_test_2
MA_test_2<-MA_map(x= tf_3,rast_path = "C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/gmap_package/GMAPR/landsat_gmap_test",
z=break_pt,analyte = "H2S",extent = "s", transect= "MA04",campaign = "test_test",
rast_type = "landsat",pt_size = 2,color_pal = "",zoom_scale = 100)
MA_test_2<-MA_map(x= tf_3,rast_path = "C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/gmap_package/GMAPR/landsat_gmap_test",
z=break_pt,analyte = "H2S",extent = "s", transect= "MA04",campaign = "test_test",
rast_type = "landsat",pt_size = 2,color_pal = "wed",zoom_scale = 100)
MA_test
st_test<- ST_map(x=tf_2,z=break_pt,rast_path = "C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Downloads/m_4308757_se_16_060_20220623/m_4308757_se_16_060_20220623.tif",
analyte = "H2S", transect="ST02",campaign = "test_test_test",
color_pal="wed",zoom_scale = 200)
st_test
use_r("MA_map")
st_test<- ST_map(x=tf_2,z=break_pt,rast_path = "C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Downloads/m_4308757_se_16_060_20220623/m_4308757_se_16_060_20220623.tif",
analyte = "H2S", transect="ST02",campaign = "test_test_test",
color_pal="o",zoom_scale = 200)
st_test
source("~/GMAP_Xact/gmap_package/GMAPR/GMAPR2/testing_code.R")
use_r("MA_ST_bind")
use_r("rawlist_2_df")
use_r("MA_ST_bind")
MA_ST_bind <- function(x,y=NULL){
if(!is.null(y)){
output <- x %>%
bind_rows(., y) %>%
separate(name,c("type", "instrument", "residence_time_sec", "units", "header"), sep = "_") %>%
filter(!header == "Mode") %>%
mutate(value = as.numeric(value)) %>%
mutate(header = case_when (str_detect(instrument, c("Picarro|Syft")) ~ paste0("ANALYTE_",header),
str_detect(header, c("GPS-Longitude|GPS-Latitude")) ~ paste0("ANALYTE_",header),
str_detect(header, c("Wind-Speed|Wind-Direction")) ~ paste0("ANALYTE_",header),
.default = header)) %>%
filter(!header == "Latitude" & !header == "Longitude") %>%
mutate(header = gsub("Wind-Direction","wd",header)) %>%
mutate(header = gsub("Wind-Speed","ws",header))
}else{output <- x %>%
separate(name,c("type", "instrument", "residence_time_sec", "units", "header"), sep = "_") %>%
filter(!header == "Mode") %>%
mutate(value = as.numeric(value)) %>%
mutate(header = case_when (str_detect(instrument, c("Picarro|Syft")) ~ paste0("ANALYTE_",header),
str_detect(header, c("GPS-Longitude|GPS-Latitude")) ~ paste0("ANALYTE_",header),
str_detect(header, c("Wind-Speed|Wind-Direction")) ~ paste0("ANALYTE_",header),
.default = header)) %>%
filter(!header == "Latitude" & !header == "Longitude") %>%
mutate(header = gsub("Wind-Direction","wd",header)) %>%
mutate(header = gsub("Wind-Speed","ws",header))}
}
#MA_ST_bind test ####
comb<-MA_ST_bind(df_test)
View(comb)
unique(comb$id)
source("~/GMAP_Xact/gmap_package/GMAPR/GMAPR2/testing_code.R")
kluz_data<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Downloads/OneDrive_2025-02-03/GMAP2 Data Kalunzy Bros")
#rawlist_2_df test####
df_test_kluz <- rawlist_2_df(kluz_data,"MA",campaign = "GMAPTEST_kluz",loc="off")
df_test_st_kluzt <-rawlist_2_df(kluz_data,"ST",campaign = "GMAPTEST_kluz",loc="off")
#MA_ST_bind test ####
comb_kluz<-MA_ST_bind(df_test_kluz,df_test_st_kluzt)
samp_counts <- tf_2 %>%
group_by(id,TimeStamp)%>%
distinct(.,id,TimeStamp ,.keep_all = T)%>%
ungroup() %>%
group_by(id) %>%
summarise(n())
kluz_loc <- comb_kluz %>%
select(TimeStamp,id,header,value) %>%
filter(str_detect(header,"ANALYTE_")) %>%
mutate(header = gsub("ANALYTE_","",header))%>%
filter(header=="GPS-Latitude"|header=="GPS-Longitude") %>%
distinct(.,TimeStamp,id,header, .keep_all = T)%>%
pivot_wider(.,id_cols = c(TimeStamp,id),names_from = header)
kluz_count <- kluz_loc %>%
group_by(id) %>%
summarise(n())
kluz_ma01_samp <- kluz_loc %>%
filter(id=='MA01') %>%
mutate(number = 1:nrow(.)) %>%
filter(number %in% sample(unique(number),40)) %>%
mutate(number_2 = 1:nrow(.)) %>%
select(id,`GPS-Latitude`,`GPS-Longitude`,number_2)
kluz_ma02_samp <- kluz_loc %>%
filter(id=='MA02') %>%
mutate(number = 1:nrow(.)) %>%
filter(number %in% sample(unique(number),101)) %>%
mutate(number_2 = 1:nrow(.)) %>%
select(id,`GPS-Latitude`,`GPS-Longitude`,number_2)
kluz_st01_samp <- kluz_loc %>%
filter(id=='ST01') %>%
mutate(number = 1:nrow(.)) %>%
filter(number %in% sample(unique(number),1)) %>%
bind_rows(replicate(36,.,simplify=F)) %>%
mutate(number_2 = 1:nrow(.)) %>%
select(id,`GPS-Latitude`,`GPS-Longitude`,number_2)
kluz_st02_samp <- kluz_loc %>%
filter(id=='MA05') %>%
mutate(id="ST02") %>%
mutate(number = 1:nrow(.)) %>%
filter(number %in% sample(unique(number),1)) %>%
bind_rows(replicate(78,.,simplify=F)) %>%
mutate(number_2 = 1:nrow(.)) %>%
select(id,`GPS-Latitude`,`GPS-Longitude`,number_2)
kluz_samp_all <- rbind(kluz_ma01_samp,kluz_ma02_samp,kluz_st01_samp,kluz_st02_samp)
tf_samp <- tf_2 %>%
filter(str_detect(header,"ANALYTE_")) %>%
mutate(header = gsub("ANALYTE_","",header))%>%
filter(!header=="GPS-Latitude"|!header=="GPS-Longitude")
samp_kluz_locs<-  tf_2 %>%
filter(str_detect(header,"ANALYTE_")) %>%
mutate(header = gsub("ANALYTE_","",header))%>%
filter(!header=="GPS-Latitude"|!header=="GPS-Longitude") %>%
distinct(.,id,TimeStamp,) %>%
group_by(id) %>%
mutate(number_2=row_number()) %>%
left_join(.,kluz_samp_all,by=c("id","number_2")) %>%
select(-number_2)
samp_kluz_fin<- tf_samp %>%
left_join(.,samp_kluz_locs,by=c("id","TimeStamp"))
View(tf_2)
View(samp_kluz_fin)
View(comb_kluz)
samp_kluz_locs<-  tf_2 %>%
filter(str_detect(header,"ANALYTE_")) %>%
mutate(header = gsub("ANALYTE_","",header))%>%
filter(!header=="GPS-Latitude"|!header=="GPS-Longitude") %>%
distinct(.,id,TimeStamp,) %>%
group_by(id) %>%
mutate(number_2=row_number()) %>%
left_join(.,kluz_samp_all,by=c("id","number_2")) %>%
select(-number_2)
kluz_samp_all <- rbind(kluz_ma01_samp,kluz_ma02_samp,kluz_st01_samp,kluz_st02_samp)
View(kluz_samp_all)
tf_samp <- tf_2 %>%
filter(str_detect(header,"ANALYTE_")) %>%
mutate(header = gsub("ANALYTE_","",header))%>%
filter(!header=="GPS-Latitude"|!header=="GPS-Longitude")
samp_kluz_locs<-  tf_2 %>%
filter(str_detect(header,"ANALYTE_")) %>%
mutate(header = gsub("ANALYTE_","",header))%>%
filter(!header=="GPS-Latitude"|!header=="GPS-Longitude") %>%
distinct(.,id,TimeStamp,) %>%
group_by(id) %>%
mutate(number_2=row_number()) %>%
left_join(.,kluz_samp_all,by=c("id","number_2")) %>%
select(-number_2)
View(samp_kluz_locs)
#rawdataprep_test#####
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/gmap_package/GMAPR/gmap_test_03_18_25")
mdl<-read.csv("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/2024_mdl_list.csv")
#rawdataprep_test#####
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/gmap_package/GMAPR/gmap_test_03_18_25")
#rawlist_2_df test####
df_test <- rawlist_2_df(test,"MA",campaign = "GMAPTEST_2",loc="off")
df_test_st <-rawlist_2_df(test,"ST",campaign = "GMAPTEST_2",loc="off")
#MA_ST_bind test ####
comb<-MA_ST_bind(df_test,df_test_st)
##pic_flag test ####
test_pic_flag <- pic_flagging(comb, mdl, h2shs = 10110, ch4hs = 25)
tran_time_minmax <- transect_time_minmax(comb)
tf<-time_flagging(test_pic_flag, timestart = "03/18/2025 09:45:00", timestop = "03/18/2025 10:54:00", timeqt = "TESTTESTTEST",
analyte = c("H2S","acrolein","ccl4"))
tf_2<-time_flagging(tf,timestart = "03/18/2025 10:45:00", timestop = "03/18/2025 11:01:00", timeqt = "WHOOPER",
analyte = c("H2S","CH4","acetone"))
tran_max<- transect_max(tf_2)
#time series test #####
tst<- ts_table(tf_2,rm_flagged = "no")
latlong_dash <-tf_2 %>%
filter(header=="ANALYTE_GPS-Latitude" | header=="ANALYTE_GPS-Longitude") %>%
mutate(header = gsub(".*ANALYTE_GPS-","",header)) %>%
pivot_wider(.,id_cols=TimeStamp,names_from = header)
wdws_dash <-tf_2 %>%
filter(header=="ANALYTE_ws" | header=="ANALYTE_wd") %>%
mutate(header = gsub(".*ANALYTE_","",header)) %>%
pivot_wider(.,id_cols=TimeStamp,names_from = header)
dash_ex<-tf_2 %>%
unite("flag",c(mdl_flag,time_flag),sep = ",")%>%
mutate(flag = gsub(".*NA,","",flag)) %>%
mutate(flag = gsub("\\,NA","",flag)) %>%
mutate(syft_method = case_when(type=="SyftGas"~"TO15",
.default = "NA")) %>%
mutate(samp_interval = NA) %>%
mutate(particle_size = NA) %>%
filter(!header=="ANALYTE_GPS-Latitude" | !header=="ANALYTE_GPS-Longitude") %>%
left_join(.,latlong_dash,by="TimeStamp") %>%
mutate(crs = "EPSG:4326") %>%
mutate(epa_region = 5) %>%
mutate(ma_st = substr(id,start=1,stop=2)) %>%
mutate(met_bool= 1) %>%
filter(!header=="ANALYTE_ws" | !header=="ANALYTE_wd") %>%
left_join(.,wdws_dash,by="TimeStamp") %>%
mutate(naics="NA") %>%
mutate(naics_industry="NA") %>%
mutate(tags="NA") %>%
mutate(operators = "Haile.Kate, Hamilton.Scott") %>%
mutate(validated_bool=0) %>%
mutate(report_bool=0) %>%
mutate(links="NA") %>%
mutate(QAPP="NA") %>%
mutate(requestor="WDNR") %>%
mutate(Can_trigger_ppb = NA) %>%
mutate(Can_trigger_wd = NA) %>%
mutate(GMAP_bool=1) %>%
mutate(header = gsub(".*ANALYTE_","",header)) %>%
rename("transect" = "id","date"="Date","time_local"="Time",
"analyte"="header","CasNo"="cas","value_units"="units",
"lat"="Latitude","long"="Longitude","on_off"="loc_samp")
dash_ex_2 <- dash_ex%>%
select(TimeStamp,date,time_local,analyte,CasNo,value,value_units,flag,
syft_method,samp_interval,particle_size,lat,long,crs,epa_region,
ma_st,on_off,instrument, met_bool,wd,ws,campaign,naics,naics_industry,
tags,operators,transect,validated_bool,report_bool,links,QAPP,
requestor,Can_trigger_ppb,Can_trigger_wd,GMAP_bool)
write.csv(dash_ex_2,"GMAP_VAN_examp_march.csv")
source("~/GMAP_Xact/gmap_package/GMAPR/GMAPR2/testing_code.R")
mdl<-read.csv("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/2024_mdl_list.csv")
#rawdataprep_test#####
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test")
#rawlist_2_df test####
df_test <- rawlist_2_df(test,"MA",campaign = "GMAPTEST_2",loc="off")
df_test_st <-rawlist_2_df(test,"ST",campaign = "GMAPTEST_2",loc="off")
#MA_ST_bind test ####
comb<-MA_ST_bind(df_test,df_test_st)
##pic_flag test ####
test_pic_flag <- pic_flagging(comb, mdl, h2shs = 10110, ch4hs = 25)
tran_time_minmax <- transect_time_minmax(comb)
View(tran_time_minmax)
tran_time_minmax
tf<-time_flagging(test_pic_flag, timestart = "02/03/2025 11:17:00", timestop = "02/03/2025 1:18:00", timeqt = "TESTTESTTEST",
analyte = c("H2S","acrolein","ccl4"))
tf_2<-time_flagging(tf,timestart = "02/03/2025 11:22:00", timestop = "02/03/2025 11:30:00", timeqt = "WHOOPER",
analyte = c("H2S","CH4","acetone"))
kluz_data<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Downloads/OneDrive_2025-02-03/GMAP2 Data Kalunzy Bros")
#rawlist_2_df test####
df_test_kluz <- rawlist_2_df(kluz_data,"MA",campaign = "GMAPTEST_kluz",loc="off")
df_test_st_kluzt <-rawlist_2_df(kluz_data,"ST",campaign = "GMAPTEST_kluz",loc="off")
#MA_ST_bind test ####
comb_kluz<-MA_ST_bind(df_test_kluz,df_test_st_kluzt)
samp_counts <- tf_2 %>%
group_by(id,TimeStamp)%>%
distinct(.,id,TimeStamp ,.keep_all = T)%>%
ungroup() %>%
group_by(id) %>%
summarise(n())
kluz_loc <- comb_kluz %>%
select(TimeStamp,id,header,value) %>%
filter(str_detect(header,"ANALYTE_")) %>%
mutate(header = gsub("ANALYTE_","",header))%>%
filter(header=="GPS-Latitude"|header=="GPS-Longitude") %>%
distinct(.,TimeStamp,id,header, .keep_all = T)%>%
pivot_wider(.,id_cols = c(TimeStamp,id),names_from = header)
kluz_count <- kluz_loc %>%
group_by(id) %>%
summarise(n())
kluz_ma01_samp <- kluz_loc %>%
filter(id=='MA01') %>%
mutate(number = 1:nrow(.)) %>%
filter(number %in% sample(unique(number),40)) %>%
mutate(number_2 = 1:nrow(.)) %>%
select(id,`GPS-Latitude`,`GPS-Longitude`,number_2)
kluz_ma02_samp <- kluz_loc %>%
filter(id=='MA02') %>%
mutate(number = 1:nrow(.)) %>%
filter(number %in% sample(unique(number),101)) %>%
mutate(number_2 = 1:nrow(.)) %>%
select(id,`GPS-Latitude`,`GPS-Longitude`,number_2)
kluz_st01_samp <- kluz_loc %>%
filter(id=='ST01') %>%
mutate(number = 1:nrow(.)) %>%
filter(number %in% sample(unique(number),1)) %>%
bind_rows(replicate(36,.,simplify=F)) %>%
mutate(number_2 = 1:nrow(.)) %>%
select(id,`GPS-Latitude`,`GPS-Longitude`,number_2)
kluz_st02_samp <- kluz_loc %>%
filter(id=='MA05') %>%
mutate(id="ST02") %>%
mutate(number = 1:nrow(.)) %>%
filter(number %in% sample(unique(number),1)) %>%
bind_rows(replicate(78,.,simplify=F)) %>%
mutate(number_2 = 1:nrow(.)) %>%
select(id,`GPS-Latitude`,`GPS-Longitude`,number_2)
kluz_samp_all <- rbind(kluz_ma01_samp,kluz_ma02_samp,kluz_st01_samp,kluz_st02_samp)
tf_samp <- tf_2 %>%
filter(str_detect(header,"ANALYTE_")) %>%
mutate(header = gsub("ANALYTE_","",header))%>%
filter(!header=="GPS-Latitude"|!header=="GPS-Longitude")
samp_kluz_locs<-  tf_2 %>%
filter(str_detect(header,"ANALYTE_")) %>%
mutate(header = gsub("ANALYTE_","",header))%>%
filter(!header=="GPS-Latitude"|!header=="GPS-Longitude") %>%
distinct(.,id,TimeStamp,) %>%
group_by(id) %>%
mutate(number_2=row_number()) %>%
left_join(.,kluz_samp_all,by=c("id","number_2")) %>%
select(-number_2)
samp_kluz_fin<- tf_samp %>%
left_join(.,samp_kluz_locs,by=c("id","TimeStamp"))
View(samp_kluz_fin)
dash_ex<-samp_kluz_fin %>%
unite("flag",c(mdl_flag,time_flag),sep = ",")%>%
mutate(flag = gsub(".*NA,","",flag)) %>%
mutate(flag = gsub("\\,NA","",flag)) %>%
mutate(syft_method = case_when(type=="SyftGas"~"TO15",
.default = "NA")) %>%
mutate(samp_interval = NA) %>%
mutate(particle_size = NA) %>%
filter(!header=="ANALYTE_GPS-Latitude" | !header=="ANALYTE_GPS-Longitude") %>%
left_join(.,latlong_dash,by="TimeStamp") %>%
mutate(crs = "EPSG:4326") %>%
mutate(epa_region = 5) %>%
mutate(ma_st = substr(id,start=1,stop=2)) %>%
mutate(met_bool= 1) %>%
filter(!header=="ANALYTE_ws" | !header=="ANALYTE_wd") %>%
left_join(.,wdws_dash,by="TimeStamp") %>%
mutate(naics="NA") %>%
mutate(naics_industry="NA") %>%
mutate(tags="NA") %>%
mutate(operators = "Haile.Kate, Hamilton.Scott") %>%
mutate(validated_bool=0) %>%
mutate(report_bool=0) %>%
mutate(links="NA") %>%
mutate(QAPP="NA") %>%
mutate(requestor="WDNR") %>%
mutate(Can_trigger_ppb = NA) %>%
mutate(Can_trigger_wd = NA) %>%
mutate(GMAP_bool=1) %>%
mutate(header = gsub(".*ANALYTE_","",header)) %>%
rename("transect" = "id","date"="Date","time_local"="Time",
"analyte"="header","CasNo"="cas","value_units"="units",
"lat"="Latitude","long"="Longitude","on_off"="loc_samp")
dash_ex_2 <- dash_ex%>%
select(TimeStamp,date,time_local,analyte,CasNo,value,value_units,flag,
syft_method,samp_interval,particle_size,lat,long,crs,epa_region,
ma_st,on_off,instrument, met_bool,wd,ws,campaign,naics,naics_industry,
tags,operators,transect,validated_bool,report_bool,links,QAPP,
requestor,Can_trigger_ppb,Can_trigger_wd,GMAP_bool)
write.csv(dash_ex_2,"GMAP_VAN_examp_samp_kluz.csv")
source("~/GMAP_Xact/gmap_package/GMAPR/GMAPR2/testing_code.R")
#use_git()
use_r("rawdataprep")
rawdataprep <- function(path,time_zone){
files_list <- list.files(path, full.names = TRUE, recursive = TRUE)
output_df <- c()
out_df_MA <- c()
out_df_ST <- c()
data_MA <- subset(files_list, grepl("_MA", files_list))
if(length(data_MA) == 0){
print("No Mapping Transects")
}else{for (i in seq_along(data_MA)){
MA_temp <- read.table(data_MA[[i]],skip=20, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_MA_temp <- read.table(data_MA[[i]],sep = "\t", skip = 15, nrows = 5,fill=T,header = F) %>%
replace(is.na(.),"NA") %>%
mutate(across(everything(),~str_replace_all(.,"_","-"))) %>%
mutate(across(everything(),~str_replace_all(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols = 1:ncol(.)) %>%
mutate(name = as.numeric(gsub("V", "", name))) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
# header_MA_temp_2 <-make.unique(as.character(header_MA_temp[1,]), sep = "@")
colnames(MA_temp) <- header_MA_temp
# MA_temp_2 <- MA_temp %>%
#   select(where(function(x) !all(is.na(x))))
# MA_temp_2 <- MA_temp
# names(MA_temp_2) <- gsub("\\@.*", "", names(MA_temp_2))
MA_temp_3 <- MA_temp[,!duplicated(colnames(MA_temp))]
MA_temp_4 <- MA_temp_3 %>%
mutate(across(everything(),as.character)) %>%
mutate(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp` = gsub("\\..*","",`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`)) %>%
mutate(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`=if_else(str_detect(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`,":")==FALSE,paste0("01/01/1700 00:00:00"),`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`)) %>%
mutate(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp` = as.POSIXct(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`, tz=time_zone, tryFormats = c("%m/%d/%Y %H:%M:%S")))
MA_temp_5 <- MA_temp_4 %>%
# arrange(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`)%>%
filter(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`<as.POSIXct("1900-01-01 00:00:00", format = "%Y-%m-%d %H:%M:%S"))%>%
mutate(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp` = `Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp` + days(1+(row_number())))
MA_temp_6 <- MA_temp_4 %>%
filter(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`>as.POSIXct("1900-01-01 00:00:00", format = "%Y-%m-%d %H:%M:%S"))
MA_temp_7<- MA_temp_6 %>%
bind_rows(.,MA_temp_5) %>%
rename("TimeStamp"="Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp") %>%
pivot_longer(.,cols = 2:ncol(.))
out_df_MA[[data_MA[[i]]]]<- MA_temp_7
}
print("Mapping Transect Present")
}
data_ST <- subset(files_list, grepl("_ST", files_list))
if(length(data_ST) == 0){
print("No Stationary Transects")
}else{for (i in seq_along(data_ST)){
ST_temp <- read.table(data_ST[[i]],skip=32, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_ST_temp <- read.table(data_ST[[i]],sep = "\t", skip = 27, nrows = 5,fill=T,header = F) %>%
replace(is.na(.),"NA") %>%
mutate(across(everything(),~str_replace_all(.,"_","-"))) %>%
mutate(across(everything(),~str_replace_all(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols = 1:ncol(.)) %>%
mutate(name = as.numeric(gsub("V", "", name))) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
# header_ST_temp_2 <-make.unique(as.character(header_ST_temp[1,]), sep = "@")
colnames(ST_temp) <- header_ST_temp
# ST_temp_2 <- ST_temp %>%
#   select(where(function(x) !all(is.na(x))))
# ST_temp_2 <- ST_temp
# names(ST_temp_2) <- gsub("\\@.*", "", names(ST_temp_2))
ST_temp_3 <- ST_temp[,!duplicated(colnames(ST_temp))]
ST_temp_4 <- ST_temp_3 %>%
mutate(across(everything(),as.character)) %>%
mutate(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp` = gsub("\\..*","",`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`)) %>%
mutate(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`=if_else(str_detect(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`,":")==FALSE,paste0("01/01/1700 00:00:00"),`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`)) %>%
mutate(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp` = as.POSIXct(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`, tryFormats = c("%m/%d/%Y %H:%M:%S")))
ST_temp_5 <- ST_temp_4 %>%
# arrange(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`)%>%
filter(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp` < as.POSIXct("1900-01-01 00:00:00", format = "%Y-%m-%d %H:%M:%S")) %>%
mutate(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp` = `Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp` + days(1+(row_number())))
ST_temp_6 <- ST_temp_4 %>%
filter(`Type_DeviceName_ResidenceTime-(s)_Units_TimeStamp`>as.POSIXct("1900-01-01 00:00:00", format = "%Y-%m-%d %H:%M:%S"))
ST_temp_7<- ST_temp_6 %>%
bind_rows(.,ST_temp_5) %>%
pivot_longer(.,cols = 2:ncol(.))
out_df_ST[[data_ST[[i]]]]<- ST_temp_7
}
print("Stationary Transects Present")
}
output_df[["MA"]] <- out_df_MA
output_df[["ST"]] <- out_df_ST
return(output_df)
}
#rawdataprep_test#####
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test",
time_zone = "UTC-6:00")
#rawdataprep_test#####
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test",
time_zone = "UTC-6")
#rawdataprep_test#####
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test",
time_zone = "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00")
tzdir
OlsonNames(tzdir = NULL)
#rawdataprep_test#####
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test",
time_zone = "Etc/GMT-6" )
View(test)
test[["MA"]][["C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test/Mapping/250203/250203_MA01.txt"]][["TimeStamp"]]
#rawdataprep_test#####
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test",
time_zone = "America/Chicago")
test[["MA"]][["C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test/Mapping/250203/250203_MA01.txt"]][["TimeStamp"]]
#rawdataprep_test#####
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test",
time_zone = "America/New_York")
test[["MA"]][["C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test/Mapping/250203/250203_MA01.txt"]][["TimeStamp"]]
source("~/GMAP_Xact/gmap_package/GMAPR/GMAPR2/testing_code.R", echo=TRUE)
#rawdataprep_test#####
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test",
time_zone = "America/Chicago")
test[["MA"]][["C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test/Mapping/250203/250203_MA01.txt"]][["TimeStamp"]]
mdl<-read.csv("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/2024_mdl_list.csv")
#rawdataprep_test#####
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test",
time_zone = "America/Chicago")
#rawlist_2_df test####
df_test <- rawlist_2_df(test,"MA",campaign = "GMAPTEST_2",loc="off")
load_all("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/gmap_package/GMAPR/GMAPR2")
mdl<-read.csv("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/2024_mdl_list.csv")
#rawdataprep_test#####
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/GMAP_Xact/GMAP2 Data test",
time_zone = "America/Chicago")
