summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
colnames(df_MA) <- header_MA
print("Mapping Transect Present")
}
data_ST <- subset(files_list, grepl("ST", files_list))
if(length(data_ST) == 0){
print("No Stationary Transects")
}else{df_ST <- lapply(data_ST, skip=31, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_ST <- read.table(df_ST[1],sep = "\t", skip = 27, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
colnames(df_ST) <- header_ST
print("Stationary Transect Present")
}
if(nrow(df_MA>0) | nrow(df_ST>0)){
output_df[[MA]] <- df_MA
outpur_df[[ST]] <- df_ST
}else{print("No Output Generated")}
return(output_df)
}
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/Livingston Landfill/GMAP2 Data Livingston Landfill")
rawdataprep <- function(path){
files_list <- list.files(path, full.names = TRUE, recursive = TRUE)
output_df <- c()
data_MA <- subset(files_list, grepl("ABC", files_list)) #this needs to be changed at some point in the future
if(length(data_MA) == 0){
print("No Mapping Transects")
}else{df_MA <- lapply(data_MA, skip=19, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_MA <- read.table(data_MA[1],sep = "\t", skip = 14, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
colnames(df_MA) <- header_MA
print("Mapping Transect Present")
}
data_ST <- subset(files_list, grepl("ST", files_list))
if(length(data_ST) == 0){
print("No Stationary Transects")
}else{df_ST <- lapply(data_ST, skip=31, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_ST <- read.table(data_ST[1],sep = "\t", skip = 27, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
colnames(df_ST) <- header_ST
print("Stationary Transect Present")
}
if(nrow(df_MA>0) | nrow(df_ST>0)){
output_df[[MA]] <- df_MA
outpur_df[[ST]] <- df_ST
}else{print("No Output Generated")}
return(output_df)
}
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/Livingston Landfill/GMAP2 Data Livingston Landfill")
View(test_header_collapse)
View(test)
test_MA <- subset(files, grepl("ABC", files))
test_MA_result <- lapply(test_MA, skip=19, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
View(test_MA_result)
test_MA_result <- lapply(test_MA, skip=19, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")%>%
x<-  do.call(test_MA_result,bind_rows)
test_MA_result <- lapply(test_MA, skip=19, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")%>%
x<-  do.call(bind_rows,test_MA_result)
x<-  do.call(bind_rows,test_MA_result)
View(x)
View(test_MA_result)
test_MA
test_MA_result <- lapply(test_MA, skip=19, FUN = read.table, sep = "\t",
fill = TRUE)
View(test_MA_result)
x<- read.table(test_MA[1],sep = "\t", skip = 19,fill=T)
View(x)
y<-read.table(test_MA[5],sep = "\t", skip = 19,fill=T)
View(y)
?select_if
y<-read.table(test_MA[5],sep = "\t", skip = 19,fill=T)%>%
select(.,!is.na(.))
select(across(.,~is.na(.))
y<-read.table(test_MA[5],sep = "\t", skip = 19,fill=T)%>%
y<-read.table(test_MA[5],sep = "\t", skip = 19,fill=T)%>%
select(across(.,~is.na(.)))
y<-read.table(test_MA[5],sep = "\t", skip = 19,fill=T)%>%
select_if(~!is.na(.)))
y<-read.table(test_MA[5],sep = "\t", skip = 19,fill=T)%>%
select_if(~!is.na(.))
y<-read.table(test_MA[5],sep = "\t", skip = 19,fill=T)%>%
select_if(~!all(is.na(.)))
View(y)
x<- read.table(test_MA[1],sep = "\t", skip = 19,fill=T) %>%
select_if(~!all(is.na(.)))
View(x)
d<-read.table(test_MA[5],sep = "\t", skip = 14, nrows = 5,fill=T,header = F)
View(d)
View(x)
View(y)
View(x)
View(x)
x<- read.table(test_MA[1],sep = "\t", skip = 19,fill=T)
View(x)
test_header_MA <- read.table(test_MA[1],sep = "\t", skip = 14, nrows = 5,fill=T,header = F)
test_header_collapse<-test_header_MA %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
View(test_header_collapse)
test]
test_header_collapse$V23
rawdataprep <- function(path){
files_list <- list.files(path, full.names = TRUE, recursive = TRUE)
output_df <- c()
data_MA <- subset(files_list, grepl("ABC", files_list)) #this needs to be changed at some point in the future
if(length(data_MA) == 0){
print("No Mapping Transects")
}else{df_MA <- lapply(data_MA, skip=19, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_MA <- read.table(data_MA[1],sep = "\t", skip = 14, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
colnames(df_MA) <- header_MA
print("Mapping Transect Present")
}
data_ST <- subset(files_list, grepl("ST", files_list))
if(length(data_ST) == 0){
print("No Stationary Transects")
}else{df_ST <- lapply(data_ST, skip=31, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_ST <- read.table(data_ST[1],sep = "\t", skip = 27, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
colnames(df_ST) <- header_ST
print("Stationary Transect Present")
}
if(nrow(df_MA>0) | nrow(df_ST>0)){
output_df[[MA]] <- df_MA
outpur_df[[ST]] <- df_ST
}else{print("No Output Generated")}
return(output_df)
}
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/Livingston Landfill/GMAP2 Data Livingston Landfill")
rawdataprep <- function(path){
files_list <- list.files(path, full.names = TRUE, recursive = TRUE)
output_df <- c()
data_MA <- subset(files_list, grepl("ABC", files_list)) #this needs to be changed at some point in the future
if(length(data_MA) == 0){
print("No Mapping Transects")
}else{df_MA <- lapply(data_MA, skip=19, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_MA <- read.table(data_MA[1],sep = "\t", skip = 14, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
colnames(df_MA) <- header_MA[1,]
print("Mapping Transect Present")
}
data_ST <- subset(files_list, grepl("ST", files_list))
if(length(data_ST) == 0){
print("No Stationary Transects")
}else{df_ST <- lapply(data_ST, skip=31, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_ST <- read.table(data_ST[1],sep = "\t", skip = 27, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
colnames(df_ST) <- header_ST[1,]
print("Stationary Transect Present")
}
if(nrow(df_MA>0) | nrow(df_ST>0)){
output_df[[MA]] <- df_MA
outpur_df[[ST]] <- df_ST
}else{print("No Output Generated")}
return(output_df)
}
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/Livingston Landfill/GMAP2 Data Livingston Landfill")
files<-list.files("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/Livingston Landfill/GMAP2 Data Livingston Landfill",
full.names = T,recursive = T)
test_MA <- subset(files, grepl("ABC", files))
test_MA_result <- lapply(test_MA, skip=19, FUN = read.table, sep = "\t",
fill = TRUE)
d<-read.table(test_MA[5],sep = "\t", skip = 14, nrows = 5,fill=T,header = F)
View(d)
d<-read.table(test_MA[5],sep = "\t", skip = 14, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
View(d)
d
d[1,]
rawdataprep <- function(path){
files_list <- list.files(path, full.names = TRUE, recursive = TRUE)
output_df <- c()
data_MA <- subset(files_list, grepl("ABC", files_list)) #this needs to be changed at some point in the future
if(length(data_MA) == 0){
print("No Mapping Transects")
}else{for (i in seq_along(data_MA)){
out_df_MA <- c()
df_MA <- lapply(data_MA[i], skip=19, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_MA <- read.table(data_MA[i],sep = "\t", skip = 14, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
colnames(df_MA) <- header_MA
out_df_MA[i]<-df_MA}
print("Mapping Transect Present")
}
# data_ST <- subset(files_list, grepl("ST", files_list))
# if(length(data_ST) == 0){
#    print("No Stationary Transects")
# }else{df_ST <- lapply(data_ST, skip=31, FUN = read.table, sep = "\t",
#                       fill = TRUE, na.strings = "NaN")
# header_ST <- read.table(data_ST[1],sep = "\t", skip = 27, nrows = 5,fill=T,header = F) %>%
#   mutate(across(everything(),~str_replace(.,"_","-"))) %>%
#   mutate(across(everything(),~str_replace(.," ","-"))) %>%
#   mutate(across(everything(),~sub("^$","BLANK",.))) %>%
#   pivot_longer(.,cols=1:ncol(.)) %>%
#   group_by(name) %>%
#   summarise(value = str_c(value, collapse="_")) %>%
#   pivot_wider(.)
# colnames(df_ST) <- header_ST[1,]
# print("Stationary Transect Present")
# }
# if(nrow(df_MA>0) | nrow(df_ST>0)){
#   output_df[[MA]] <- df_MA
#   outpur_df[[ST]] <- df_ST
# }else{print("No Output Generated")}
# return(output_df)
}
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/Livingston Landfill/GMAP2 Data Livingston Landfill")
rawdataprep <- function(path){
files_list <- list.files(path, full.names = TRUE, recursive = TRUE)
output_df <- c()
data_MA <- subset(files_list, grepl("ABC", files_list)) #this needs to be changed at some point in the future
if(length(data_MA) == 0){
print("No Mapping Transects")
}else{for (i in seq_along(data_MA)){
out_df_MA <- c()
df_MA <- lapply(data_MA[i], skip=19, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_MA <- read.table(data_MA[i],sep = "\t", skip = 14, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
#colnames(df_MA) <- header_MA
out_df_MA[i]<-df_MA}
print("Mapping Transect Present")
}
# data_ST <- subset(files_list, grepl("ST", files_list))
# if(length(data_ST) == 0){
#    print("No Stationary Transects")
# }else{df_ST <- lapply(data_ST, skip=31, FUN = read.table, sep = "\t",
#                       fill = TRUE, na.strings = "NaN")
# header_ST <- read.table(data_ST[1],sep = "\t", skip = 27, nrows = 5,fill=T,header = F) %>%
#   mutate(across(everything(),~str_replace(.,"_","-"))) %>%
#   mutate(across(everything(),~str_replace(.," ","-"))) %>%
#   mutate(across(everything(),~sub("^$","BLANK",.))) %>%
#   pivot_longer(.,cols=1:ncol(.)) %>%
#   group_by(name) %>%
#   summarise(value = str_c(value, collapse="_")) %>%
#   pivot_wider(.)
# colnames(df_ST) <- header_ST[1,]
# print("Stationary Transect Present")
# }
# if(nrow(df_MA>0) | nrow(df_ST>0)){
#   output_df[[MA]] <- df_MA
#   outpur_df[[ST]] <- df_ST
# }else{print("No Output Generated")}
# return(output_df)
}
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/Livingston Landfill/GMAP2 Data Livingston Landfill")
rawdataprep <- function(path){
files_list <- list.files(path, full.names = TRUE, recursive = TRUE)
output_df <- c()
out_df_MA <- c()
data_MA <- subset(files_list, grepl("ABC", files_list)) #this needs to be changed at some point in the future
if(length(data_MA) == 0){
print("No Mapping Transects")
}else{for (i in seq_along(data_MA)){
out_df_MA <- c()
df_MA <- lapply(data_MA[i], skip=19, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_MA <- read.table(data_MA[i],sep = "\t", skip = 14, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
#colnames(df_MA) <- header_MA
out_df_MA[i]<-df_MA}
print(out_df_MA)
print("Mapping Transect Present")
}
# data_ST <- subset(files_list, grepl("ST", files_list))
# if(length(data_ST) == 0){
#    print("No Stationary Transects")
# }else{df_ST <- lapply(data_ST, skip=31, FUN = read.table, sep = "\t",
#                       fill = TRUE, na.strings = "NaN")
# header_ST <- read.table(data_ST[1],sep = "\t", skip = 27, nrows = 5,fill=T,header = F) %>%
#   mutate(across(everything(),~str_replace(.,"_","-"))) %>%
#   mutate(across(everything(),~str_replace(.," ","-"))) %>%
#   mutate(across(everything(),~sub("^$","BLANK",.))) %>%
#   pivot_longer(.,cols=1:ncol(.)) %>%
#   group_by(name) %>%
#   summarise(value = str_c(value, collapse="_")) %>%
#   pivot_wider(.)
# colnames(df_ST) <- header_ST[1,]
# print("Stationary Transect Present")
# }
# if(nrow(df_MA>0) | nrow(df_ST>0)){
#   output_df[[MA]] <- df_MA
#   outpur_df[[ST]] <- df_ST
# }else{print("No Output Generated")}
# return(output_df)
}
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/Livingston Landfill/GMAP2 Data Livingston Landfill")
rawdataprep <- function(path){
files_list <- list.files(path, full.names = TRUE, recursive = TRUE)
output_df <- c()
out_df_MA <- c()
data_MA <- subset(files_list, grepl("ABC", files_list)) #this needs to be changed at some point in the future
if(length(data_MA) == 0){
print("No Mapping Transects")
}else{for (i in seq_along(data_MA)){
out_df_MA <- c()
df_MA <- lapply(data_MA[i], skip=19, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_MA <- read.table(data_MA[i],sep = "\t", skip = 14, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
#colnames(df_MA) <- header_MA
out_df_MA[i]<-df_MA}
print(out_df_MA)
print("Mapping Transect Present")
}
# data_ST <- subset(files_list, grepl("ST", files_list))
# if(length(data_ST) == 0){
#    print("No Stationary Transects")
# }else{df_ST <- lapply(data_ST, skip=31, FUN = read.table, sep = "\t",
#                       fill = TRUE, na.strings = "NaN")
# header_ST <- read.table(data_ST[1],sep = "\t", skip = 27, nrows = 5,fill=T,header = F) %>%
#   mutate(across(everything(),~str_replace(.,"_","-"))) %>%
#   mutate(across(everything(),~str_replace(.," ","-"))) %>%
#   mutate(across(everything(),~sub("^$","BLANK",.))) %>%
#   pivot_longer(.,cols=1:ncol(.)) %>%
#   group_by(name) %>%
#   summarise(value = str_c(value, collapse="_")) %>%
#   pivot_wider(.)
# colnames(df_ST) <- header_ST[1,]
# print("Stationary Transect Present")
# }
# if(nrow(df_MA>0) | nrow(df_ST>0)){
#   output_df[[MA]] <- df_MA
#   outpur_df[[ST]] <- df_ST
# }else{print("No Output Generated")}
# return(output_df)
}
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/Livingston Landfill/GMAP2 Data Livingston Landfill")
rawdataprep <- function(path){
files_list <- list.files(path, full.names = TRUE, recursive = TRUE)
output_df <- c()
out_df_MA <- c()
data_MA <- subset(files_list, grepl("ABC", files_list)) #this needs to be changed at some point in the future
if(length(data_MA) == 0){
print("No Mapping Transects")
}else{for (i in seq_along(data_MA)){
out_df_MA <- c()
df_MA <- lapply(data_MA[i], skip=19, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_MA <- read.table(data_MA[i],sep = "\t", skip = 14, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
#colnames(df_MA) <- header_MA
out_df_MA[[i]]<-df_MA}
print(out_df_MA)
print("Mapping Transect Present")
}
# data_ST <- subset(files_list, grepl("ST", files_list))
# if(length(data_ST) == 0){
#    print("No Stationary Transects")
# }else{df_ST <- lapply(data_ST, skip=31, FUN = read.table, sep = "\t",
#                       fill = TRUE, na.strings = "NaN")
# header_ST <- read.table(data_ST[1],sep = "\t", skip = 27, nrows = 5,fill=T,header = F) %>%
#   mutate(across(everything(),~str_replace(.,"_","-"))) %>%
#   mutate(across(everything(),~str_replace(.," ","-"))) %>%
#   mutate(across(everything(),~sub("^$","BLANK",.))) %>%
#   pivot_longer(.,cols=1:ncol(.)) %>%
#   group_by(name) %>%
#   summarise(value = str_c(value, collapse="_")) %>%
#   pivot_wider(.)
# colnames(df_ST) <- header_ST[1,]
# print("Stationary Transect Present")
# }
# if(nrow(df_MA>0) | nrow(df_ST>0)){
#   output_df[[MA]] <- df_MA
#   outpur_df[[ST]] <- df_ST
# }else{print("No Output Generated")}
# return(output_df)
}
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/Livingston Landfill/GMAP2 Data Livingston Landfill")
rawdataprep <- function(path){
files_list <- list.files(path, full.names = TRUE, recursive = TRUE)
output_df <- c()
out_df_MA <- c()
data_MA <- subset(files_list, grepl("ABC", files_list)) #this needs to be changed at some point in the future
if(length(data_MA) == 0){
print("No Mapping Transects")
}else{for (i in seq_along(data_MA)){
out_df_MA <- c()
df_MA <- lapply(data_MA[i], skip=19, FUN = read.table, sep = "\t",
fill = TRUE, na.strings = "NaN")
header_MA <- read.table(data_MA[i],sep = "\t", skip = 14, nrows = 5,fill=T,header = F) %>%
mutate(across(everything(),~str_replace(.,"_","-"))) %>%
mutate(across(everything(),~str_replace(.," ","-"))) %>%
mutate(across(everything(),~sub("^$","BLANK",.))) %>%
pivot_longer(.,cols=1:ncol(.)) %>%
group_by(name) %>%
summarise(value = str_c(value, collapse="_")) %>%
pivot_wider(.)
#colnames(df_MA) <- header_MA
out_df_MA[[i]] <- df_MA[i]}
print(out_df_MA)
print("Mapping Transect Present")
}
# data_ST <- subset(files_list, grepl("ST", files_list))
# if(length(data_ST) == 0){
#    print("No Stationary Transects")
# }else{df_ST <- lapply(data_ST, skip=31, FUN = read.table, sep = "\t",
#                       fill = TRUE, na.strings = "NaN")
# header_ST <- read.table(data_ST[1],sep = "\t", skip = 27, nrows = 5,fill=T,header = F) %>%
#   mutate(across(everything(),~str_replace(.,"_","-"))) %>%
#   mutate(across(everything(),~str_replace(.," ","-"))) %>%
#   mutate(across(everything(),~sub("^$","BLANK",.))) %>%
#   pivot_longer(.,cols=1:ncol(.)) %>%
#   group_by(name) %>%
#   summarise(value = str_c(value, collapse="_")) %>%
#   pivot_wider(.)
# colnames(df_ST) <- header_ST[1,]
# print("Stationary Transect Present")
# }
# if(nrow(df_MA>0) | nrow(df_ST>0)){
#   output_df[[MA]] <- df_MA
#   outpur_df[[ST]] <- df_ST
# }else{print("No Output Generated")}
# return(output_df)
}
test<-rawdataprep("C:/Users/rfranc01/OneDrive - Environmental Protection Agency (EPA)/Documents/new_van_example/Livingston Landfill/GMAP2 Data Livingston Landfill")
seq_along(data_MA)
seq_along(test_MA)
